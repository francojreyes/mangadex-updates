'''
Main file that makes requests to mangadex API and sends embeds to webhook
'''
import time
import traceback
from datetime import datetime, timedelta
from urllib.error import HTTPError

import requests
from discord_webhook import DiscordWebhook, DiscordEmbed

import sheet_reader

# Important URLs
API_URL = 'https://api.mangadex.org/'

# Time between each check (in hours)
INTERVAL = 1

def check_updates():
    '''
    Get and send all manga updates
    '''
    # Read data from google sheets
    sheets = sheet_reader.get_sheets()
    # Determine time of last check
    last_check = datetime.now() - timedelta(hours=INTERVAL)
    print("Checking since", last_check.strftime("%Y-%m-%dT%H:%M:%S"))

    # Get all English chapters updated since last check
    query_params = {
        'limit': 100,
        'offset': 0,
        'updatedAtSince': last_check.strftime("%Y-%m-%dT%H:%M:%S"),
        'translatedLanguage[0]': 'en',
    }
    try:
        response = requests.get(f'{API_URL}chapter',
                                params=query_params).json()
    except HTTPError:
        traceback.print_exc()
        return

    chapters = response['data']
    while response['total'] > response['limit']:
        query_params['offset'] += response['limit']
        try:
            response = requests.get(
                f'{API_URL}chapter', params=query_params).json()
        except HTTPError:
            traceback.print_exc()
            return
        chapters += response['data']

    for chapter in chapters:
        # Ensure chapter is actually new
        if get_time_posted(chapter) < last_check:
            continue
       
        # Search all sheets and send webhooks to any sheet which has the manga ID in its whitelist
        manga = get_manga(chapter)
        for sheet in sheets:
            if manga['id'] not in sheet['ids']:
                continue

            for webhook in sheet['webhooks']:
                # Send an embed to the webhook about the chapter
                # Get manga data
                manga_url = 'https://mangadex.org/title/' + manga['id']
                title = get_title(manga)

                # Get chapter data
                chapter_url = get_chapter_url(chapter)
                description = generate_description(chapter)
                time_posted = get_time_posted(chapter)
                og_image = get_og_image(chapter)

                # Send webhook to discord
                webhook = DiscordWebhook(
                    url=webhook,
                    username='MangaDex',
                    avatar_url='https://a.thumbs.redditmedia.com/S4mI9Gu-Kl1lv5PV7ZdSW7zSGQsdNVGptvWmogPDLI8.png'
                )
                embed = DiscordEmbed(
                    title=title,
                    url=manga_url,
                    description=f"[{description}]({chapter_url})",
                    color='f69220'
                )
                embed.set_image(url=og_image)
                embed.set_timestamp(time_posted.timestamp())
                webhook.add_embed(embed)

                try:
                    webhook.execute()
                except HTTPError:
                    traceback.print_exc()


def get_title(manga):
    '''
    Return main title
    '''
    return list(manga['attributes']['title'].values())[0]


def generate_description(chapter):
    '''
    Find volume and chapter numbers.
    If volume is none, return chapter only.
    If both none, oneshot.
    '''
    attributes = chapter['attributes']
    if attributes['volume']:
        return f"Volume {attributes['volume']}, Chapter {attributes['chapter']}"

    if attributes['chapter']:
        return f"Chapter {attributes['chapter']}"

    return "Oneshot"


def get_manga(chapter):
    '''
    Get the manga attached to the given chapter
    '''
    for relationship in chapter['relationships']:
        if relationship['type'] == 'manga':
            break
    else:
        return None

    try:
        response = requests.get(f"{API_URL}manga/{relationship['id']}")
        return response.json()['data']
    except HTTPError:
        traceback.print_exc()
        return None


def get_og_image(chapter):
    '''
    Get the url for the og image generated by MangaDex embeds
    '''
    return 'https://og.mangadex.org/og-image/chapter/' + chapter['id']


def get_chapter_url(chapter):
    '''
    Return external URL if exists, or mangadex url otherwise
    '''
    if chapter['attributes']['externalUrl']:
        return chapter['attributes']['externalUrl']

    return 'https://mangadex.org/chapter/' + chapter['id']


def get_time_posted(chapter):
    '''
    Return datetime object corresponding to time chapter was posted
    '''
    return datetime.strptime(
        chapter['attributes']['readableAt'], '%Y-%m-%dT%H:%M:%S+00:00')


if __name__ == '__main__':
    while True:
        check_updates()
        time.sleep(3600 * INTERVAL)
